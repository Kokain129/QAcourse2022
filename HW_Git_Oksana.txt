
Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

JSON

 4. Создать внешний репозиторий c названием JSON


 5. Клонировать репозиторий JSON на локальный компьютер: 	git clone https://github.com/Kokain129/JSON.git


 6. Внутри локального JSON создать файл “new.json”: 	touch new.json


 7. Добавить файл под гит: 	git add new.json


 8. Закоммитить файл: 	git commit -m "new json file is to be commited"


 9. Отправить файл на внешний GitHub репозиторий: 	git push


 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON: 

vim new.json

{	
	"name":"Andromeda Galaz",
	"age":129,
	"animals q-ty":0,
	"desired salary": 10000
}


 11. Отправить изменения на внешний репозиторий: 	git commit -am "updates for newfile" && git push


 12. Создать файл preferences.json: 	vim preferences.json


 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON:

{
	"movie":"Lord of the rings",
	"series":"Over the Garden Wall",
	"food":"grilled",
	"season":"spring",
	"country":"China"
}


 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON:

vim skills.json

{
	"Instrument skills":"Git, Terminal, JS, Postman, CharlesProxy",
	"QA Theory":"What's QA, Types of Software testing",
	"QA artifactes":"Check-lists, test-cases, bug reports, test plans"
}


 15. Отправить сразу 2 файла на внешний репозиторий: 	git add . | git commit -m "adding new files" | git push


 16. На веб интерфейсе создать файл bug_report.json: 	click the "Add file" > "Create New file" button 


 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе: 	click the "Commit new file" button


 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON:

{
  "title":"Issue QA-1",
  "Summary":"The token is not accepted by GIT after providing it via Git Bash",
  "STR":"Step1, Step2, Step3",
  "ER":"The token is accepted after copy-pasting it from Git"
}


 19. Сделать Commit changes (сохранить) изменения на веб интерфейсe: 	click the "Commit new file" button


 20. Синхронизировать внешний и локальный репозиторий JSON: 	git pull


XML

 21. Создать внешний репозиторий c названием XML.


 22. Клонировать репозиторий XML на локальный компьютер:	git clone https://github.com/Kokain129/XML.git


 23. Внутри локального XML создать файл “new.xml”:	touch new.xml


 24. Добавить файл под гит:	git add new.xml


 25. Закоммитить файл:		git commit -m "added new.xml"


 26. Отправить файл на внешний GitHub репозиторий:	git push


 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML:

vim new.xml

<name>Andro Galayz</name>
<age>129</age>
<animals_guantity>0</animals_guantity>
<salary>10000</salary>


 28. Отправить изменения на внешний репозиторий:	git commit -am "added changes to file" && git push


 29. Создать файл preferences.xml: 	vim preferences.xml


 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML:

<movie>Matrix</movie>
<series>Sense8</series>
<food>fish</food>
<season>spring</season>
<country>Mexico</country>


 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML:

vim skills.xml

<api>Postman</api>
<terminal>Bash</terminal>
<programming_language>JS</programming_language>
<ci_cd>GIT</ci_cd>

 32. Сделать коммит в одну строку:	git add . && git commit -m "adding changes and new file skills.xml"


 33. Отправить сразу 2 файла на внешний репозиторий:	 git push

 34. На веб интерфейсе создать файл bug_report.xml.
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

 38. Синхронизировать внешний и локальный репозиторий XML: git pull



TXT
 1. Создать внешний репозиторий c названием TXT.

 2. Клонировать репозиторий TXT на локальный компьютер: 	git clone https://github.com/Kokain129/TXT.git


 3. Внутри локального TXT создать файл “new.txt”: 	touch new.txt


 4. Добавить файл под гит: 	git add new.txt


 5. Закоммитить файл: 	git commit -m "added new txt file"


 6. Отправить файл на внешний GitHub репозиторий: 	git push


 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT:	vim new.txt

Name, Surname: Andro Galaz;
Age: 129;
Number of animals: 0;
Future salary: 10000


 8. Отправить изменения на внешний репозиторий: git commit -am "updated new txt file" && git push


 9. Создать файл preferences.txt:	vim preferences.txt


 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT:

Любимый фильм: No country for old men,
любимый сериал: Wild west world,
любимая еда: salmon,
любимое время года: autumn,
сторона которую хотели бы посетить: Iceland

 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT

vim skills.txt

CI\CD: GitHub, Gitbash;
Instruments: Postman, DBeaver, Charles Proxy, Fiddler,
Programming languages, DB: Java Script, Python, SQL.


 12. Сделать коммит в одну строку: 	git add . && git commit -m "adding changes and new file skills.txt"


 13. Отправить сразу 2 файла на внешний репозиторий: 	git push


 14. На веб интерфейсе создать файл bug_report.txt.
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

 18. Синхронизировать внешний и локальный репозиторий TXT: 	git pull
