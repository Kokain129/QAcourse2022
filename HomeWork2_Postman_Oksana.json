{
	"info": {
		"_postman_id": "6b276b6d-9b09-4c1e-bc11-fffb94c21336",
		"name": "Group_29_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Request1_GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request2_POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Check#1: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"let name = \"Andromeda\"\r",
							"let name_check = jsonData.name\r",
							"\r",
							"pm.test(\"Check#2: Name\", function () {\r",
							"    pm.expect(name).to.eql(name_check);\r",
							"});\r",
							"\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"let age = '30'\r",
							"let age_check = jsonData.age\r",
							"\r",
							"pm.test(\"Check#3: Age\", function () {\r",
							"    pm.expect(age).to.eql(age_check);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"let salary = 1200\r",
							"let salary_check = jsonData.salary\r",
							"\r",
							"pm.test(\"Check#4: Salary\", function () {\r",
							"    pm.expect(salary).to.eql(salary_check);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request\r",
							"let req = request.data\r",
							"\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let req_name = req.name;\r",
							"let res_name = jsonData.name\r",
							"\r",
							"pm.test(\"Check#5: Request name == Response name\", function () {\r",
							"    pm.expect(req_name).to.eql(res_name);\r",
							"});\r",
							"\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let req_age = req.age;\r",
							"let res_age = jsonData.age\r",
							"\r",
							"pm.test(\"Check#6: Request age == Response age\", function () {\r",
							"    pm.expect(req_age).to.eql(res_age);\r",
							"});\r",
							"\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = Number(req.salary);\r",
							"let res_salary = jsonData.salary\r",
							"\r",
							"pm.test(\"Check#7: Request salary == Response salary\", function () {\r",
							"    pm.expect(req_salary).to.eql(res_salary);\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response:\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request):\r",
							"\r",
							"let req_salary15 = req.salary * 4;\r",
							"let salary_check15 = jsonData.family.u_salary_1_5_year\r",
							"\r",
							"pm.test(\"Check#8: u_salary_1_5_year parameter == salary*4\", function () {\r",
							"    pm.expect(req_salary15).to.eql(salary_check15);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andromeda",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1200",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request3_GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Check#1: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req = pm.request.url.query.all()\r",
							"console.log(req)\r",
							"\r",
							"// parse CERTAIN parameter:\r",
							"// let name = pm.request.url.query.get(\"name\")\r",
							"// console.log(name)\r",
							"\r",
							"\r",
							"// // 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let req_name = req[0].value\r",
							"let res_name = jsonData.name\r",
							"\r",
							"pm.test(\"Check#2: Request name == Response name\", function () {\r",
							"    pm.expect(req_name).to.eql(res_name);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let req_age = req[1].value\r",
							"let res_age = jsonData.age\r",
							"\r",
							"pm.test(\"Check#3: Request age == Response age\", function () {\r",
							"    pm.expect(req_age).to.eql(res_age);\r",
							"});\r",
							"\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let req_salary = Number(req[2].value)\r",
							"let res_salary = jsonData.salary\r",
							"\r",
							"pm.test(\"Check#4: Request salary == Response salary\", function () {\r",
							"    pm.expect(req_salary).to.eql(res_salary);\r",
							"});\r",
							"\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"Check#5: The dog has a name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.a.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Check#6: The dog has an age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.a.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Check#7: The dogs' name == Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.deep.equal(\"Luky\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Check#8: The dogs' age == 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.deep.equal(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Andromeda&age=30&salary=1200",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andromeda"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1200"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Request4_GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Check#1: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req = pm.request.url.query.all()\r",
							"console.log(req)\r",
							"\r",
							"// parse CERTAIN parameter:\r",
							"// let name = pm.request.url.query.get(\"name\")\r",
							"// console.log(name)\r",
							"\r",
							"\r",
							"// // 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let req_name = req[0].value\r",
							"let res_name = jsonData.name\r",
							"\r",
							"pm.test(\"Check#2: Request name == Response name\", function () {\r",
							"    pm.expect(req_name).to.eql(res_name);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"let req_age = Number(req[1].value)\r",
							"let res_age = jsonData.age\r",
							"\r",
							"\r",
							"pm.test(\"Check#3: Request age == Response age\", function () {\r",
							"    pm.expect(req_age).to.eql(res_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request\r",
							"\r",
							"console.log(req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check#3: Salary[0] == Request salary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.deep.equal(Number(req[2].value));\r",
							"});\r",
							"\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check#4: Salary[1] == Request salary*2\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.deep.equal(String(req[2].value *2));\r",
							"});\r",
							"\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check#5: Salary[2] == Request salary*3\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.deep.equal(String(req[2].value *2));\r",
							"});\r",
							"\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Andromeda&age=30&salary=1200",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andromeda"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1200"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Request5_POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"// 6. Спарсить response body в json.\r",
							"// 7. Спарсить request.\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"// Умножь salary на 3.3 и проверь что оно равно salary1,5\r",
							"\r",
							"// // jsonData[\"qa_salary_after_1.5_year\"]\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}